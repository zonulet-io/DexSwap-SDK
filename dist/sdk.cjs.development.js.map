{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport MULTICALL_ABI from './abis/multicall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  harmony_testnet as coreHarmony_Testnet,\n  harmony as coreHarmony,\n} from '../coreContracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  harmony_testnet as peripheryHarmony_Testnet,\n  harmony as peripheryHarmony,\n} from '../routerContracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.HARMONY]: coreHarmony.factory,\n  [ChainId.HARMONY_TESTNET]: coreHarmony_Testnet.factory,\n\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.HARMONY]: peripheryHarmony.router,\n  [ChainId.HARMONY_TESTNET]: peripheryHarmony_Testnet.router,\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0x709db16a6ef437197938256460c49183dc36ca4d',\n  [ChainId.HARMONY]: '0x1b551f670dF0c98413483003c33A2300ED8A4d0C',\n  [ChainId.HARMONY_TESTNET]: '0x15b61cc2ac17e9826277b3ff41aa2644a774daab',\n}\n\nexport const INIT_CODE_HASH = '0x95ed020ecc18bb40fead050319f6a769b5e582067c1224bb03b29877fcf10625'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n  [ChainId.HARMONY]: '0xdfF73dA7cC9e8DbAA77998F81E7AcB4D7384d88B',\n  [ChainId.RINKEBY]: '0x8c9E7447ABE0607a610a1C3E7cCC1A7B51f729C2',\n  [ChainId.HARMONY_TESTNET]: '0xD76bF711EC7FA3740fC0ddae1A7CB648E77604e8',\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS, STAKING_REWARDS_FACTORY_ABI, STAKING_REWARDS_DISTRIBUTION_ABI }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly HARMONY: Currency = new Currency(18, 'ONE', 'ONE')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.HARMONY]: Currency.HARMONY,\n    [ChainId.HARMONY_TESTNET]: Currency.HARMONY,\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\nexport const ETHER = Currency.ETHER\nexport const HARMONY = Currency.HARMONY\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.HARMONY]: new Token(\n      ChainId.HARMONY,\n      '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    ),\n    [ChainId.HARMONY_TESTNET]: new Token(\n      ChainId.HARMONY_TESTNET,\n      '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    )\n  }\n\n  // TODO:\n  public static readonly ZDEX: { [key: number]: Token } = {\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xA9c6d7F92a894310B9C04968326A9dE6D0e38724', 18, 'ZDEX', 'ZonuDex'),\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0xd91e528577e1Caf2edb60d86ae2AFaEeF405E3F6', 18, 'ZDEX', 'ZonuDex'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0xd91e528577e1Caf2edb60d86ae2AFaEeF405E3F6', 18, 'ZDEX', 'ZonuDex'),\n  }\n\n  public static readonly WONE: { [key: number]: Token } = {\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a', 18, 'WONE', 'Wrapped One'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2', 18, 'WONE', 'Wrapped One')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.HARMONY]: Token.WONE[ChainId.HARMONY],\n    [ChainId.HARMONY_TESTNET]: Token.WETH[ChainId.HARMONY_TESTNET],\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const ZDEX = Token.ZDEX\nexport const WONE = Token.WONE\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst VIPERSWAP_FACTORY_ADDRESS = '0x7D02c116b98d0965ba7B642ace0183ad8b8D2196' // mainnet\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst VIPERSWAP_ROUTER_ADDRESS = '0xf012702a5f0e54015362cBCA26a26fc90AA832a3' // mainnet //\n\n\n\n\n\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEXSWAP = new RoutablePlatform(\n    'DEXSWAP',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS },\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    _30\n  )\n\n  public static readonly VIPERSWAP = new RoutablePlatform(\n    'Viperswap',\n    { [ChainId.HARMONY]: VIPERSWAP_FACTORY_ADDRESS},\n    { [ChainId.HARMONY]: VIPERSWAP_ROUTER_ADDRESS},\n    '0x162f79e638367cd45a118c778971dfd8d96c625d2798d3b71994b035cfe9b6dc',\n    _30\n  )\n\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE: { [chainId in ChainId]: any } = {\n  [ChainId.MAINNET]: {},\n  [ChainId.HARMONY]: {},\n  [ChainId.HARMONY_TESTNET]: {},\n  [ChainId.RINKEBY]: {}\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEXSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.VIPERSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEXSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEXSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEXS', 'DexSwap')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.HARMONY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY).decimals).toString(),\n    ChainId.HARMONY\n  ),\n  [ChainId.HARMONY_TESTNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY_TESTNET).decimals).toString(),\n    ChainId.HARMONY_TESTNET\n  ),\n\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDuration(): JSBI {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return JSBI.subtract(jsbiEndsAt, jsbiStartsAt)\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return JSBI.BigInt('0')\n    return JSBI.subtract(jsbiEndsAt, now)\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    // when the campaign has ended, apy is returned as 0\n    if (this.remainingDuration.toString() === '0') return new Percent('0', '1')\n\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.remainingDuration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDexSwapPair from '@dexs/core/build/IDexSwapPair.json'\nimport IDexSwapFactory from '@dexs/core/build/IDexSwapFactory.json'\nimport invariant from 'tiny-invariant'\nimport { ChainId, BigintIsh, FACTORY_ADDRESS, MULTICALL_ADDRESS, MULTICALL_ABI } from './constants'\nimport { Token } from './entities/token'\nimport { RoutablePlatform } from './entities/routable-platform'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDexSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DEXS',\n      'DexSwap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDexSwapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDexSwapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(MULTICALL_ADDRESS[liquidityTokens[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDexSwapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDexSwapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DEXS', 'DexSwap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = tokenPairsToFetch.length === 0 ? [] : await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","ZERO_ADDRESS","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","HARMONY","coreHarmony","HARMONY_TESTNET","coreHarmony_Testnet","ROUTER_ADDRESS","peripheryMainnet","router","peripheryRinkeby","peripheryHarmony","peripheryHarmony_Testnet","STAKING_REWARDS_FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","USD","Token","equals","other","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","WETH","WONE","currencyEquals","currencyA","currencyB","ZDEX","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","UNISWAP_FACTORY_ADDRESS","SUSHISWAP_FACTORY_ADDRESS","VIPERSWAP_FACTORY_ADDRESS","UNISWAP_ROUTER_ADDRESS","SUSHISWAP_ROUTER_ADDRESS","VIPERSWAP_ROUTER_ADDRESS","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEXSWAP","SUSHISWAP","UNISWAP","VIPERSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","reward","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","remainingDuration","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","cumulativeRemainingRewardAmountNativeCurrency","remainingRewardAmount","yieldInPeriod","annualizationMultiplier","rawApy","PricedToken","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IDexSwapPair","abi","getReserves","reserves0","reserves1","balances","IDexSwapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","multicall","MULTICALL_ABI","factoryContract","liquidityTokenContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","swapFeesFetched","tokenPairsToFetchIndex","tokenPairAddress","fetchProtocolFee","feeDenominator","feeTo","feeReceiver"],"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"}