{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport MULTICALL_ABI from './abis/multicall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  harmony_testnet as coreHarmony_Testnet,\n  harmony as coreHarmony,\n} from '../coreContracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  harmony_testnet as peripheryHarmony_Testnet,\n  harmony as peripheryHarmony,\n} from '../routerContracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.HARMONY]: coreHarmony.factory,\n  [ChainId.HARMONY_TESTNET]: coreHarmony_Testnet.factory,\n\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.HARMONY]: peripheryHarmony.router,\n  [ChainId.HARMONY_TESTNET]: peripheryHarmony_Testnet.router,\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0x709db16a6ef437197938256460c49183dc36ca4d',\n  [ChainId.HARMONY]: '0x1b551f670dF0c98413483003c33A2300ED8A4d0C',\n  [ChainId.HARMONY_TESTNET]: '0x15b61cc2ac17e9826277b3ff41aa2644a774daab',\n}\n\nexport const INIT_CODE_HASH = '0x95ed020ecc18bb40fead050319f6a769b5e582067c1224bb03b29877fcf10625'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n  [ChainId.HARMONY]: '0xdfF73dA7cC9e8DbAA77998F81E7AcB4D7384d88B',\n  [ChainId.RINKEBY]: '0x8c9E7447ABE0607a610a1C3E7cCC1A7B51f729C2',\n  [ChainId.HARMONY_TESTNET]: '0xD76bF711EC7FA3740fC0ddae1A7CB648E77604e8',\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS, STAKING_REWARDS_FACTORY_ABI, STAKING_REWARDS_DISTRIBUTION_ABI }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly HARMONY: Currency = new Currency(18, 'ONE', 'ONE')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.HARMONY]: Currency.HARMONY,\n    [ChainId.HARMONY_TESTNET]: Currency.HARMONY,\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\nexport const ETHER = Currency.ETHER\nexport const HARMONY = Currency.HARMONY\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.HARMONY]: new Token(\n      ChainId.HARMONY,\n      '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    ),\n    [ChainId.HARMONY_TESTNET]: new Token(\n      ChainId.HARMONY_TESTNET,\n      '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    )\n  }\n\n  // TODO:\n  public static readonly ZDEX: { [key: number]: Token } = {\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xA9c6d7F92a894310B9C04968326A9dE6D0e38724', 18, 'ZDEX', 'ZonuDex'),\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0xd91e528577e1Caf2edb60d86ae2AFaEeF405E3F6', 18, 'ZDEX', 'ZonuDex'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0xd91e528577e1Caf2edb60d86ae2AFaEeF405E3F6', 18, 'ZDEX', 'ZonuDex'),\n  }\n\n  public static readonly WONE: { [key: number]: Token } = {\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a', 18, 'WONE', 'Wrapped One'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2', 18, 'WONE', 'Wrapped One')\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.HARMONY]: Token.WONE[ChainId.HARMONY],\n    [ChainId.HARMONY_TESTNET]: Token.WETH[ChainId.HARMONY_TESTNET],\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const ZDEX = Token.ZDEX\nexport const WONE = Token.WONE\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst VIPERSWAP_FACTORY_ADDRESS = '0x7D02c116b98d0965ba7B642ace0183ad8b8D2196' // mainnet\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst VIPERSWAP_ROUTER_ADDRESS = '0xf012702a5f0e54015362cBCA26a26fc90AA832a3' // mainnet //\n\n\n\n\n\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEXSWAP = new RoutablePlatform(\n    'DEXSWAP',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS },\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    _30\n  )\n\n  public static readonly VIPERSWAP = new RoutablePlatform(\n    'Viperswap',\n    { [ChainId.HARMONY]: VIPERSWAP_FACTORY_ADDRESS},\n    { [ChainId.HARMONY]: VIPERSWAP_ROUTER_ADDRESS},\n    '0x162f79e638367cd45a118c778971dfd8d96c625d2798d3b71994b035cfe9b6dc',\n    _30\n  )\n\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE: { [chainId in ChainId]: any } = {\n  [ChainId.MAINNET]: {},\n  [ChainId.HARMONY]: {},\n  [ChainId.HARMONY_TESTNET]: {},\n  [ChainId.RINKEBY]: {}\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEXSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.VIPERSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEXSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEXSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEXS', 'DexSwap')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.HARMONY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY).decimals).toString(),\n    ChainId.HARMONY\n  ),\n  [ChainId.HARMONY_TESTNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY_TESTNET).decimals).toString(),\n    ChainId.HARMONY_TESTNET\n  ),\n\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDuration(): JSBI {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return JSBI.subtract(jsbiEndsAt, jsbiStartsAt)\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return JSBI.BigInt('0')\n    return JSBI.subtract(jsbiEndsAt, now)\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    // when the campaign has ended, apy is returned as 0\n    if (this.remainingDuration.toString() === '0') return new Percent('0', '1')\n\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.remainingDuration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDexSwapPair from '@dexs/core/build/IDexSwapPair.json'\nimport IDexSwapFactory from '@dexs/core/build/IDexSwapFactory.json'\nimport invariant from 'tiny-invariant'\nimport { ChainId, BigintIsh, FACTORY_ADDRESS, MULTICALL_ADDRESS, MULTICALL_ABI } from './constants'\nimport { Token } from './entities/token'\nimport { RoutablePlatform } from './entities/routable-platform'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDexSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DEXS',\n      'DexSwap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDexSwapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDexSwapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(MULTICALL_ADDRESS[liquidityTokens[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDexSwapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDexSwapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DEXS', 'DexSwap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = tokenPairsToFetch.length === 0 ? [] : await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","RINKEBY","HARMONY","HARMONY_TESTNET","ROUTER_ADDRESS","STAKING_REWARDS_FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","USD","Token","equals","other","this","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WONE","ZDEX","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEXSWAP","SUSHISWAP","UNISWAP","VIPERSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingDuration","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IDexSwapPair","abi","getReserves","reserves0","reserves1","balances","IDexSwapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","multicall","MULTICALL_ABI","factoryContract","liquidityTokenContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","swapFeesFetched","tokenPairsToFetchIndex","tokenPairAddress","fetchProtocolFee","feeDenominator","feeTo","feeReceiver"],"mappings":"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"}